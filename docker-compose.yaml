services:
  task-tracker-backend:
    build:
      context: .
      dockerfile: task-tracker-backend/Dockerfile
    image: bekzatmv/task-tracker-backend:latest
    depends_on:
      db:
        condition: service_healthy
      broker1:
        condition: service_started
      broker2:
        condition: service_started
      broker3:
        condition: service_started
    restart: always
    environment:
      DATASOURCE_URL: ${spring_datasource_url}
      DATASOURCE_USERNAME: ${spring_datasource_username}
      DATASOURCE_PASSWORD: ${spring_datasource_password}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      SPRING_KAFKA_BOOTSTRAP_SERVERS: broker1:9092,broker2:9094,broker3:9096
    ports:
      - "8080:8080"
    networks:
      - spring-task-network

  task-tracker-scheduler:
    build:
      context: .
      dockerfile: scheduler/Dockerfile
    image: bekzatmv/task-tracker-scheduler:latest
    depends_on:
      db:
        condition: service_healthy
      broker1:
        condition: service_started
      broker2:
        condition: service_started
      broker3:
        condition: service_started
    restart: always
    environment:
      DATASOURCE_URL: ${spring_datasource_url}
      DATASOURCE_USERNAME: ${spring_datasource_username}
      DATASOURCE_PASSWORD: ${spring_datasource_password}
      SPRING_KAFKA_BOOTSTRAP_SERVERS: broker1:9092,broker2:9094,broker3:9096
    ports:
      - "8082:8082"
    networks:
      - spring-task-network

  task-tracker-email-sender:
    build:
      context: .
      dockerfile: email-sender/Dockerfile
    image: bekzatmv/task-tracker-email-sender:latest
    depends_on:
      broker1:
        condition: service_started
      broker2:
        condition: service_started
      broker3:
        condition: service_started
    restart: always
    environment:
      MAILJET_API_KEY: ${mailjet_api_key}
      MAILJET_SECRET_KEY: ${mailjet_secret_key}
      SPRING_KAFKA_BOOTSTRAP_SERVERS: broker1:9092,broker2:9094,broker3:9096
    ports:
      - "8081:8081"
    networks:
      - spring-task-network

  db:
    image: postgres:17
    container_name: db
    environment:
      POSTGRES_USER: ${db_user}
      POSTGRES_PASSWORD: ${db_password}
      POSTGRES_DB: ${db_name}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5435:5432"
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - spring-task-network

  broker1:
    image: bitnami/kafka:latest
    ports:
      - "9092:9092"
    environment:
      KAFKA_ENABLE_KRAFT: yes
      KAFKA_CFG_NODE_ID: 1
      KAFKA_KRAFT_CLUSTER_ID: 8i0CrgCnToqZRAFCYz5hMg
      KAFKA_CFG_PROCESS_ROLES: broker,controller
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://broker1:9092
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@broker1:9093,2@broker2:9095,3@broker3:9097
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      ALLOW_PLAINTEXT_LISTENER: yes
    restart: always
    volumes:
      - kafka1_data:/bitnami/kafka
    networks:
      - spring-task-network

  broker2:
    image: bitnami/kafka:latest
    ports:
      - "9094:9094"
    environment:
      KAFKA_ENABLE_KRAFT: yes
      KAFKA_CFG_NODE_ID: 2
      KAFKA_KRAFT_CLUSTER_ID: 8i0CrgCnToqZRAFCYz5hMg
      KAFKA_CFG_PROCESS_ROLES: broker, controller
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9094,CONTROLLER://:9095
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://broker2:9094
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@broker1:9093,2@broker2:9095,3@broker3:9097
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      ALLOW_PLAINTEXT_LISTENER: yes
    restart: always
    volumes:
      - kafka2_data:/bitnami/kafka
    networks:
      - spring-task-network

  broker3:
    image: bitnami/kafka:latest
    ports:
      - "9096:9096"
    environment:
      KAFKA_ENABLE_KRAFT: yes
      KAFKA_CFG_NODE_ID: 3
      KAFKA_KRAFT_CLUSTER_ID: 8i0CrgCnToqZRAFCYz5hMg
      KAFKA_CFG_PROCESS_ROLES: broker, controller
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9096,CONTROLLER://:9097
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://broker3:9096
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@broker1:9093,2@broker2:9095,3@broker3:9097
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      ALLOW_PLAINTEXT_LISTENER: yes
    restart: always
    volumes:
      - kafka3_data:/bitnami/kafka
    networks:
      - spring-task-network

volumes:
  db-data:
    driver: local
  kafka1_data:
    driver: local
  kafka2_data:
    driver: local
  kafka3_data:
    driver: local
networks:
  spring-task-network:
    driver: bridge
